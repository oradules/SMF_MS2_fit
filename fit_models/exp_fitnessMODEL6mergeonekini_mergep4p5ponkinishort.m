function ee=exp_fitnessMODEL6mergeonekini_mergep4p5ponkinishort(k, alpha, xno, sno, xhi, shi,  ppno,pphi, ponkinino, ponkinihi); 
 lambda1=k(1); 
 lambda2=k(2); 
 lambda3=k(3); 
 lambda4=k(4); 
 lambda5=k(5); 
 A1=k(6); 
 A2=k(7); 
 A3=k(8); 
 A4=k(9); 
 A5=1-A1-A2-A3-A4; 
 L1no = lambda1 + lambda2 + lambda3 + lambda4 + lambda5; 
 L2no = lambda1 * lambda2 + lambda1 * lambda3 + lambda1 * lambda4 + lambda1 * lambda5 + lambda2 * lambda3 + lambda2 * lambda4 + lambda2 * lambda5 + lambda3 * lambda4 + lambda3 * lambda5 + lambda4 * lambda5; 
 L3no = lambda1 * lambda2 * lambda3 + lambda1 * lambda2 * lambda4 + lambda1 * lambda2 * lambda5 + lambda1 * lambda3 * lambda4 + lambda1 * lambda3 * lambda5 + lambda1 * lambda4 * lambda5 + lambda2 * lambda3 * lambda4 + lambda2 * lambda3 * lambda5 + lambda2 * lambda4 * lambda5 + lambda3 * lambda4 * lambda5; 
 L4no = lambda1 * lambda2 * lambda3 * lambda4 + lambda1 * lambda2 * lambda3 * lambda5 + lambda1 * lambda2 * lambda4 * lambda5 + lambda1 * lambda3 * lambda4 * lambda5 + lambda2 * lambda3 * lambda4 * lambda5; 
 L5no = lambda1*lambda2*lambda3*lambda4*lambda5; 
 pno = A1*exp(lambda1*xno) + A2*exp(lambda2*xno)+A3*exp(lambda3*xno)+A4*exp(lambda4*xno)+A5*exp(lambda5*xno); 
 S1no = A1*lambda1  + A2*lambda2   + A3*lambda3   + A4*lambda4   + A5*lambda5; 
 S2no = A1*lambda1^2+ A2*lambda2^2 + A3*lambda3^2 + A4*lambda4^2 + A5*lambda5^2; 
 S3no = A1*lambda1^3+ A2*lambda2^3 + A3*lambda3^3 + A4*lambda4^3 + A5*lambda5^3; 
 S4no = A1*lambda1^4+ A2*lambda2^4 + A3*lambda3^4 + A4*lambda4^4 + A5*lambda5^4; 
 SS1no = abs(A1*lambda1)+ abs(A2*lambda2) + abs(A3*lambda3) + abs(A4*lambda4) + abs(A5*lambda5); 
 lambda1=k(10); 
 lambda2=k(11); 
 lambda3=k(12); 
 lambda4=k(13); 
 lambda5=k(14); 
 A1=k(15); 
 A2=k(16); 
 A3=k(17); 
 A4=k(18); 
 A5=1-A1-A2-A3-A4; 
 L1hi = lambda1 + lambda2 + lambda3 + lambda4 + lambda5; 
 L2hi = lambda1 * lambda2 + lambda1 * lambda3 + lambda1 * lambda4 + lambda1 * lambda5 + lambda2 * lambda3 + lambda2 * lambda4 + lambda2 * lambda5 + lambda3 * lambda4 + lambda3 * lambda5 + lambda4 * lambda5; 
 L3hi = lambda1 * lambda2 * lambda3 + lambda1 * lambda2 * lambda4 + lambda1 * lambda2 * lambda5 + lambda1 * lambda3 * lambda4 + lambda1 * lambda3 * lambda5 + lambda1 * lambda4 * lambda5 + lambda2 * lambda3 * lambda4 + lambda2 * lambda3 * lambda5 + lambda2 * lambda4 * lambda5 + lambda3 * lambda4 * lambda5; 
 L4hi = lambda1 * lambda2 * lambda3 * lambda4 + lambda1 * lambda2 * lambda3 * lambda5 + lambda1 * lambda2 * lambda4 * lambda5 + lambda1 * lambda3 * lambda4 * lambda5 + lambda2 * lambda3 * lambda4 * lambda5; 
 L5hi = lambda1*lambda2*lambda3*lambda4*lambda5; 
 phi = A1*exp(lambda1*xhi) + A2*exp(lambda2*xhi)+A3*exp(lambda3*xhi)+A4*exp(lambda4*xhi)+A5*exp(lambda5*xhi); 
 S1hi = A1*lambda1  + A2*lambda2   + A3*lambda3   + A4*lambda4   + A5*lambda5; 
 S2hi = A1*lambda1^2+ A2*lambda2^2 + A3*lambda3^2 + A4*lambda4^2 + A5*lambda5^2; 
 S3hi = A1*lambda1^3+ A2*lambda2^3 + A3*lambda3^3 + A4*lambda4^3 + A5*lambda5^3; 
 S4hi = A1*lambda1^4+ A2*lambda2^4 + A3*lambda3^4 + A4*lambda4^4 + A5*lambda5^4; 
 SS1hi = abs(A1*lambda1)+ abs(A2*lambda2) + abs(A3*lambda3) + abs(A4*lambda4) + abs(A5*lambda5); 
 k1=k(19); 
 k2=k(20); 
 k3=k(21); 
 k4=k(22); 
 k5=k(23); 
 k6no=k(24); 
 k9no=k(25); 
 k10no=k(26); 
 k6hi=k(27); 
 k9hi=k(28); 
 k10hi=k(29); 
 LL1no = - k1 - k2 - k3 - k4 - k5 - k6no - k9no - k10no; 
 LL2no = k1*k3 + k1*k4 + k1*k5 + k2*k4 + k1*k6no + k2*k5 + k2*k6no + k3*k5 + k3*k6no + k1*k9no + k4*k6no + k1*k10no + k2*k9no + k5*k6no + k2*k10no + k3*k9no + k3*k10no + k4*k9no + k4*k10no + k5*k9no + k5*k10no + k6no*k9no + k9no*k10no; 
 LL3no = - k1*k3*k5 - k1*k3*k6no - k1*k4*k6no - k1*k5*k6no - k2*k4*k6no - k1*k3*k9no - k2*k5*k6no - k1*k3*k10no - k1*k4*k9no - k3*k5*k6no - k1*k4*k10no - k1*k5*k9no - k2*k4*k9no - k1*k5*k10no - k1*k6no*k9no - k2*k4*k10no - k2*k5*k9no - k2*k5*k10no - k2*k6no*k9no - k3*k5*k9no - k3*k5*k10no - k3*k6no*k9no - k4*k6no*k9no - k1*k9no*k10no - k5*k6no*k9no - k2*k9no*k10no - k3*k9no*k10no - k4*k9no*k10no - k5*k9no*k10no; 
 LL4no = k1*k3*k5*k6no + k1*k3*k5*k9no + k1*k3*k5*k10no + k1*k3*k6no*k9no + k1*k4*k6no*k9no + k1*k5*k6no*k9no + k2*k4*k6no*k9no + k2*k5*k6no*k9no + k1*k3*k9no*k10no + k1*k4*k9no*k10no + k1*k5*k9no*k10no + k2*k4*k9no*k10no + k2*k5*k9no*k10no + k3*k5*k9no*k10no; 
 LL5no = -k1*k3*k5*k9no*k10no; 
 SS2no = -k5*k10no; 
 SS3no = -k5*k10no*(L1no + k1 + k2 + k3 + k9no); 
 SS4no = -k10no*(L1no*(k5*k9no + k5*(k1 + k2 + k3)) - k5*(L2no - L1no^2) + k1*k3*k5 + k5*k9no*(k1 + k2 + k3)); 
 pt=k1*k3*k5*k6no + k1*k3*k5*k9no + k1*k3*k6no*k9no + k1*k4*k6no*k9no + k1*k5*k6no*k9no + k2*k4*k6no*k9no + k2*k5*k6no*k9no + k1*k3*k9no*k10no + k1*k4*k9no*k10no + k2*k4*k9no*k10no; 
 p1no= (k2*k9no*(k4*k6no + k5*k6no + k4*k10no))/pt; 
 p2no= (k1*k9no*(k4*k6no + k5*k6no + k4*k10no))/pt; 
 p3no= (k1*k3*k9no*(k6no + k10no))/pt; 
 p4no= (k1*k3*k5*k6no)/pt; 
 p5no= (k1*k3*k5*k9no)/pt; 
 LL1hi = - k1 - k2 - k3 - k4 - k5 - k6hi - k9hi - k10hi; 
 LL2hi = k1*k3 + k1*k4 + k1*k5 + k2*k4 + k1*k6hi + k2*k5 + k2*k6hi + k3*k5 + k3*k6hi + k1*k9hi + k4*k6hi + k1*k10hi + k2*k9hi + k5*k6hi + k2*k10hi + k3*k9hi + k3*k10hi + k4*k9hi + k4*k10hi + k5*k9hi + k5*k10hi + k6hi*k9hi + k9hi*k10hi; 
 LL3hi = - k1*k3*k5 - k1*k3*k6hi - k1*k4*k6hi - k1*k5*k6hi - k2*k4*k6hi - k1*k3*k9hi - k2*k5*k6hi - k1*k3*k10hi - k1*k4*k9hi - k3*k5*k6hi - k1*k4*k10hi - k1*k5*k9hi - k2*k4*k9hi - k1*k5*k10hi - k1*k6hi*k9hi - k2*k4*k10hi - k2*k5*k9hi - k2*k5*k10hi - k2*k6hi*k9hi - k3*k5*k9hi - k3*k5*k10hi - k3*k6hi*k9hi - k4*k6hi*k9hi - k1*k9hi*k10hi - k5*k6hi*k9hi - k2*k9hi*k10hi - k3*k9hi*k10hi - k4*k9hi*k10hi - k5*k9hi*k10hi; 
 LL4hi = k1*k3*k5*k6hi + k1*k3*k5*k9hi + k1*k3*k5*k10hi + k1*k3*k6hi*k9hi + k1*k4*k6hi*k9hi + k1*k5*k6hi*k9hi + k2*k4*k6hi*k9hi + k2*k5*k6hi*k9hi + k1*k3*k9hi*k10hi + k1*k4*k9hi*k10hi + k1*k5*k9hi*k10hi + k2*k4*k9hi*k10hi + k2*k5*k9hi*k10hi + k3*k5*k9hi*k10hi; 
 LL5hi = -k1*k3*k5*k9hi*k10hi; 
 SS2hi = -k5*k10hi; 
 SS3hi = -k5*k10hi*(L1hi + k1 + k2 + k3 + k9hi); 
 SS4hi = -k10hi*(L1hi*(k5*k9hi + k5*(k1 + k2 + k3)) - k5*(L2hi - L1hi^2) + k1*k3*k5 + k5*k9hi*(k1 + k2 + k3)); 
 pt=k1*k3*k5*k6hi + k1*k3*k5*k9hi + k1*k3*k6hi*k9hi + k1*k4*k6hi*k9hi + k1*k5*k6hi*k9hi + k2*k4*k6hi*k9hi + k2*k5*k6hi*k9hi + k1*k3*k9hi*k10hi + k1*k4*k9hi*k10hi + k2*k4*k9hi*k10hi; 
 p1hi= (k2*k9hi*(k4*k6hi + k5*k6hi + k4*k10hi))/pt; 
 p2hi= (k1*k9hi*(k4*k6hi + k5*k6hi + k4*k10hi))/pt; 
 p3hi= (k1*k3*k9hi*(k6hi + k10hi))/pt; 
 p4hi= (k1*k3*k5*k6hi)/pt; 
 p5hi= (k1*k3*k5*k9hi)/pt; 
 ponkininopred = p5no*k10no; 
 ponkinihipred = p5hi*k10hi; 
 NS = length(xno); 
 NSno= sqrt(NS); 
 fact1no=sqrt(1-alpha); 
 fact2no=sqrt(alpha); 
 NS = length(xhi); 
 NShi= sqrt(NS); 
 fact1hi=sqrt(1-alpha); 
 fact2hi=sqrt(alpha); 
 constr=[(L1no-LL1no)/L1no;(L2no-LL2no)/L2no;(L3no-LL3no)/L3no;(L4no-LL4no)/L4no;(L5no-LL5no)/L5no;S1no/SS1no;(S2no-SS2no)/S2no;(S3no-SS3no)/S3no;(S4no-SS4no)/S4no;(p1no-ppno(1))/ppno(1);(p2no-ppno(2))/ppno(2);(p3no-ppno(3))/ppno(3);(p4no+p5no-ppno(4)-ppno(5))/(ppno(4)+ppno(5));(ponkininopred-ponkinino)/ponkinino;(L1hi-LL1hi)/L1hi;(L2hi-LL2hi)/L2hi;(L3hi-LL3hi)/L3hi;(L4hi-LL4hi)/L4hi;(L5hi-LL5hi)/L5hi;S1hi/SS1hi;(S2hi-SS2hi)/S2hi;(S3hi-SS3hi)/S3hi;(S4hi-SS4hi)/S4hi;(p1hi-pphi(1))/pphi(1);(p2hi-pphi(2))/pphi(2);(p3hi-pphi(3))/pphi(3);(p4hi+p5hi-pphi(4)-pphi(5))/(pphi(4)+pphi(5));(ponkinihipred-ponkinihi)/ponkinihi]; 
 if alpha == 1 
     ee =  [(pno-sno)/NSno;(phi-shi)/NShi;constr]/sqrt(30); 
 else 
     psno = pno./sno;psno(psno<=0)=100; 
     pshi = phi./shi;pshi(pshi<=0)=100; 
     ee = [ (log(psno))/NSno*fact1no;(pno-sno)/NSno*fact2no;(log(pshi))/NShi*fact1hi;(phi-shi)/NShi*fact2hi;constr]/sqrt(30); 
 end 
 